version: '3.8'

services:
  db:
    image: postgres:17-alpine
    container_name: db_jwt_auth
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - jwt_auth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build: ./backend
    image: backend_jwt_auth
    container_name: backend_jwt_auth
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./backend/src:/app/src
      - ./backend/prisma:/app/prisma
      - /app/node_modules
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_URL=${DB_URL}
    networks:
      - jwt_auth_network
    restart: unless-stopped

  frontend:
    build: ./frontend
    image: frontend_jwt_auth
    container_name: frontend_jwt_auth
    env_file:
      - .env
    ports:
      - "5173:5173"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - jwt_auth_network
    restart: unless-stopped

  mailer:
    image: mailhog/mailhog
    ports:
      - "8085:8025"
    networks:
      - jwt_auth_network

volumes:
  postgres_data:

networks:
  jwt_auth_network:
    driver: bridge