// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(uuid()) @db.Uuid
  username      String?  @unique @db.VarChar(255)
  password_hash String   @db.VarChar(255)
  email         String   @unique @db.VarChar(255)
  is_active     Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  last_login_at DateTime @default(now())
  activate_link String   @unique @default(uuid()) @db.Uuid

  RefreshToken   RefreshToken[]
  AccessToken    AccessToken[]
  TokenBlacklist TokenBlacklist[]

  @@map("users")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @unique @db.VarChar(512)
  jti        String   @unique @default(uuid()) @db.Uuid
  expires_at DateTime
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("refresh_tokens")
}

model AccessToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @db.VarChar(512)
  jti        String   @unique @default(uuid()) @db.Uuid
  expires_at DateTime
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("access_tokens")
}

model TokenBlacklist {
  id             Int      @id @default(autoincrement())
  user_id        Int
  jti            String   @unique @db.Uuid
  reason         String?
  blacklisted_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("tokens_blacklist")
}
